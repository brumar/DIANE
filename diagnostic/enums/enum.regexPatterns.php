<?php

// Enum: type d'operations
abstract class RegexPatterns
{
	const   separatedFormula="/((?:\d+\s*[+*\-])+\s*(?!\d+\s*[=\+\-])\d+).*?(\d+)/"; // take formulas like a+b...some stuff..c
	const   followedUpOperation="/(\d+\s*[+*\-\/]\s*\d+\s*=\s*(\d+))\s*[+*\-\/]/";// take all the formulas (a+b=c+)
	const	completeOperation = "/\d+\s*[+*\-\/]\s*\d+\s*=\s*\d+/"; // take all the formulas (a+b=c)
	const   compositeOperation="/(\d+\s*[+*\-\/]\s*\d+\s*)[+*\-\/]/"; // take all the formulas (a+b+....=c)
	const   EndresultAfterFormulas="/[^=\d]+(\d+)*[^=\d]*$/"; // do not control for formula existence and take the last isolated number
	const   veryLastNumberAfterEqualSign="/=\s*(\d+)[^=]*$/";
	const   lastNumberInFormula="/=\s*(\d+)/";
	const 	isolatedNumbersAfterFormulas="/(?:\d+\s*[+*\-\/]\s*\d+\s*=\s*\d*[^\d]*)*((\d+)[^\d])+/"; //g option (multi match)
	const	number = "/\d+/";
	
	/*
	 *  **************complete operation (generated by regex101.com) *************
	 * 
	\d+ match a digit [0-9]
		Quantifier: + Between one and unlimited times, as many times as possible, giving back as needed [greedy]
	\s* match any white space character [\r\n\t\f ]
		Quantifier: * Between zero and unlimited times, as many times as possible, giving back as needed [greedy]
	[+*-\/] match a single character present in the list below
		+ the literal character +
		*-\/ a single character in the range between the following two characters
		* the literal character *
		\/ the literal character /
	\s* match any white space character [\r\n\t\f ]
		Quantifier: * Between zero and unlimited times, as many times as possible, giving back as needed [greedy]
	\d+ match a digit [0-9]
		Quantifier: + Between one and unlimited times, as many times as possible, giving back as needed [greedy]
	\s* match any white space character [\r\n\t\f ]
		Quantifier: * Between zero and unlimited times, as many times as possible, giving back as needed [greedy]
	= matches the character = literally
	\s* match any white space character [\r\n\t\f ]
		Quantifier: * Between zero and unlimited times, as many times as possible, giving back as needed [greedy]
	\d+ match a digit [0-9]
		Quantifier: + Between one and unlimited times, as many times as possible, giving back as needed [greedy]
	 * 
	 */
	
/* *  **************separated formula (generated by regex101.com) *************
	
	1st Capturing group ((?:\d+\s*[+*\-])+\s*(?!\d+\s*[=\+\-])\d+)
		(?:\d+\s*[+*\-])+ Non-capturing group
			Quantifier: + Between one and unlimited times, as many times as possible, giving back as needed [greedy]
			\d+ match a digit [0-9]
			Quantifier: + Between one and unlimited times, as many times as possible, giving back as needed [greedy]
		\s* match any white space character [\r\n\t\f ]
			Quantifier: * Between zero and unlimited times, as many times as possible, giving back as needed [greedy]
			[+*\-] match a single character present in the list below
			+* a single character in the list +* literally
			\- matches the character - literally
			\s* match any white space character [\r\n\t\f ]
			Quantifier: * Between zero and unlimited times, as many times as possible, giving back as needed [greedy]
			(?!\d+\s*[=\+\-]) Negative Lookahead - Assert that it is impossible to match the regex below
			\d+ match a digit [0-9]
			Quantifier: + Between one and unlimited times, as many times as possible, giving back as needed [greedy]
			\s* match any white space character [\r\n\t\f ]
			Quantifier: * Between zero and unlimited times, as many times as possible, giving back as needed [greedy]
			[=\+\-] match a single character present in the list below
			= the literal character =
			\+ matches the character + literally
			\- matches the character - literally
		\d+ match a digit [0-9]
		Quantifier: + Between one and unlimited times, as many times as possible, giving back as needed [greedy]
		
	.*? matches any character (except newline)
		Quantifier: *? Between zero and unlimited times, as few times as possible, expanding as needed [lazy]
	2nd Capturing group (\d+)
		\d+ match a digit [0-9]
		Quantifier: + Between one and unlimited times, as many times as possible, giving back as needed [greedy]
		g modifier: global. All matches (don't return on first match) 
	*/

}

?>
